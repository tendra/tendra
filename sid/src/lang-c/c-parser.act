/*
 * Copyright 2008-2011, The TenDRA Project.
 * Copyright 1997, United Kingdom Secretary of State for Defence.
 *
 * See doc/copyright/ for the full copyright terms.
 */

/*
 * C Information file parser actions.
 */


%prefixes%

	terminal = C_TOK_;

%maps%

	StringT -> NStringT;
	CCodeP  -> CCodeP;
	bool   -> bool;
	pos    -> unsigned;

	c-parse-grammar -> c_parse_grammar;

%header% @{

	/*
	 * Copyright 2008-2011, The TenDRA Project.
	 * Copyright 1997, United Kingdom Secretary of State for Defence.
	 *
	 * See doc/copyright/ for the full copyright terms.
	 */

	#include <assert.h>

	#include <shared/bool.h>
	#include <shared/check.h>
	#include <shared/error.h>

	#include "../adt/action.h"
	#include "../adt/basic.h"
	#include "../adt/entry.h"
	#include "../adt/type.h"
	#include "../adt/types.h"

	#include "c-parser.h"
	#include "c-code.h"
	#include "c-out-info.h"

	#define ERROR_TERMINAL @$ERROR
	#define CURRENT_TERMINAL c_lexer_get_terminal (c_current_stream)
	#define ADVANCE_LEXER c_lexer_next_token (c_current_stream)
	#define SAVE_LEXER(x) (c_lexer_save_terminal (c_current_stream, (CTokenT) (x)))
	#define RESTORE_LEXER (c_lexer_restore_terminal (c_current_stream))

	/* typedefs for the maps section */
	typedef CCodeT *CCodeP;

	static NStringT    c_prefix_names [CPFX_NUM_PREFIXES];
	static bool       c_inited_prefix_names = false;
	static CPrefixT    c_current_prefix;
	static EntryT     *c_current_entry;
	static TypeTupleT  c_saved_type;
	static TypeTupleT  c_current_type;
	static bool       c_propagating_error = false;

	CLexerStreamT *c_current_stream;
	COutputInfoT  *c_current_out_info;
	TableT        *c_current_table;


	static void err_expected(const char *item) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"expected %s", item);
	}

	static void err_unknown(const char *item, NStringT *name) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"unknown %s '%S'", item, (void *) name);
	}

	static void err_mult(const char *verb, const char *item, NStringT *name) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"multiple %s operations defined for %s '%S'", verb, item, (void *) name);
	}

	static void err_formal_clash(const char *verb, const char *item, KeyT *key, TypeTupleT *a, TypeTupleT *b) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s operation formal clash for %s '%K' [parameter = %Y, result = %Y]",
			verb, item, (void *) key, (void *) a, (void *) b);

	}

	static void err_clash(const char *verb, const char *field, const char *item, KeyT *key, TypeTupleT *a) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s operation %s clash (or missing name) for %s '%K' [%s = %Y]",
			verb, field, item, (void *) key, field, (void *) a);
	}

	static void err_field_clash(const char *field, const char *item, KeyT *key, TypeTupleT *a) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s clash (or missing name) for %s '%K' [%s = %Y]",
			field, item, (void *) key, field, (void *) a);
	}

	static void err_mismatch(const char *field, const char *verb, const char *item, KeyT *key, TypeTupleT *a, TypeTupleT *b) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s type mismatch for %s operation on %s '%K' [%Y should be %Y]",
			field, verb, item, (void *) key, (void *) a, (void *) b);
	}

	static void err_field_mismatch(const char *field, KeyT *key, TypeTupleT *a, TypeTupleT *b) {
		error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
			"%s type mismatch for action '%K' [%Y should be %Y]",
			field, (void *) key, (void *) a, (void *) b);
	}

@}, @{

	/*
	 * Copyright 2008-2011, The TenDRA Project.
	 * Copyright 1997, United Kingdom Secretary of State for Defence.
	 *
	 * See doc/copyright/ for the full copyright terms.
	 */

	/*
	 * c-parser.h - SID C parser.
	 *
	 * This file specifies the interface to the SID C definition file parser that
	 * is produced from the file "c-parser.sid".
	 */

	#include "../adt/table.h"

	#include "c-lexer.h"
	#include "c-out-info.h"

	extern CLexerStreamT *c_current_stream;
	extern COutputInfoT  *c_current_out_info;
	extern TableT        *c_current_table;

@};

%assignments%

	StringT: (a) -> (b) = @{
		nstring_assign (&@b, @&a);
	@};

%parameter-assignments%

	StringT: (a) -> (b) = @{
		nstring_assign(&@b, @a);
	@};

%result-assignments%

	StringT: (a) -> (b) = @{
		nstring_assign(@b, @&a);
	@};

%terminals%

	C-IDENTIFIER: () -> (i) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	SID-IDENTIFIER: () -> (i) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	CODE: () -> (c) = @{
		@c = c_lexer_code_value(c_current_stream);
	@};

	ACT-BASIC: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-LABEL: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-REFERENCE: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-IDENTIFIER: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-MODIFIABLE: () -> (i :StringT) = @{
		nstring_assign(&@i, c_lexer_string_value(c_current_stream));
	@};

	ACT-CODESTRING: () -> (s :StringT) = @{
		nstring_assign(&@s, c_lexer_string_value(c_current_stream));
	@};

	ACT-CODESTART: () -> (p :pos) = @{
		@p = c_lexer_stream_line(c_current_stream);
	@};

%actions%

	/*
	 * Prefix section actions
	 */

	<set-prefix>: (string) -> () = @{
		int prefix;

		if (!c_inited_prefix_names) {
			nstring_copy_cstring(&c_prefix_names[CPFX_TYPE], "type");
			nstring_copy_cstring(&c_prefix_names[CPFX_FN], "function");
			nstring_copy_cstring(&c_prefix_names[CPFX_IN], "input");
			nstring_copy_cstring(&c_prefix_names[CPFX_OUT], "output");
			nstring_copy_cstring(&c_prefix_names[CPFX_LABEL], "label");
			nstring_copy_cstring(&c_prefix_names[CPFX_TERMINAL], "terminal");
			nstring_copy_cstring(&c_prefix_names[CPFX_PERSISTENTS], "persistents");
			c_inited_prefix_names = true;
		}

		for (prefix = 0; prefix < CPFX_NUM_PREFIXES; prefix++) {
			if (nstring_ci_equal(@&string, &c_prefix_names[prefix])) {
				break;
			}
		}

		c_current_prefix = (CPrefixT) prefix;
		if (c_current_prefix == CPFX_NUM_PREFIXES) {
			err_unknown("prefix type", @&string);
		}
		nstring_destroy(&@=string);
	@};

	<x-set-prefix>: (string) -> () = @{
		if (c_current_prefix == CPFX_NUM_PREFIXES) {
			nstring_destroy(&@=string);
		} else {
			NStringT *prefix = c_out_info_prefix(c_current_out_info, c_current_prefix);

			nstring_destroy(prefix);
			nstring_assign(prefix, &@=string);
		}
	@};

	<set-persistent>: (name :StringT &, type :StringT &) -> () = @{
		if(persistent_list_find(c_out_info_persistents(c_current_out_info), @&name) == NULL) {
			PersistentT *p;

			p = persistent_create(&@=name, &@=type);
			persistent_list_append(c_out_info_persistents(c_current_out_info), p);
		} else {
			nstring_destroy(&@=name);
			nstring_destroy(&@=type);
			/* TODO error out E_c_persistent_variable_name_conflict(@&name)) ;*/
		}
	@};

	<empty-string>: () -> (i :StringT) = @{
		nstring_init(&@i);
	@};


	/*
	 * Mapping section actions
	 */

	<set-map>: (string) -> () = @{
		c_current_entry = table_get_entry(c_current_table, @&string);
		if (c_current_entry == NULL) {
			err_unknown("identifier", @&string);
		} else if (entry_get_mapping(c_current_entry)) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"attempt to remap identifier '%S'", (void *) @&string);
			c_current_entry = NULL;
		} else {
			switch (entry_type(c_current_entry)) EXHAUSTIVE {
			case ET_NAME:
			case ET_ACTION:
			case ET_NON_LOCAL:
				error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
					"cannot map identifier '%S' [it must be a rule, a basic or a type]", (void *) @&string);
				c_current_entry = NULL;
				break;
			case ET_RENAME:
			case ET_PREDICATE:
				UNREACHED;
				break;
			case ET_TYPE:
			case ET_RULE:
			case ET_BASIC:
				break;
			}
		}
		nstring_destroy(&@=string);
	@};

	<x-set-map>: (string) -> () = @{
		if (c_current_entry) {
			entry_set_mapping(c_current_entry, &@=string);
		} else {
			nstring_destroy(&@=string);
		}
	@};


	/*
	 * Header actions
	 */

	<set-header1>: (code) -> () = @{
		c_code_check(@code, false, false, false, NULL, NULL, c_current_table);
		c_out_info_set_header1(c_current_out_info, @code);
	@};

	<set-header2>: (code) -> () = @{
		c_code_check(@code, false, false, false, NULL, NULL, c_current_table);
		c_out_info_set_header2(c_current_out_info, @code);
	@};


	/*
	 * Argument list actions
	 */

	<save-tuple> = @{
		types_assign(&c_saved_type, &c_current_type);
	@};

	<null-type> = @{
		types_init(&c_saved_type);
		types_init(&c_current_type);
	@};

	<init-tuple> = @{
		types_init(&c_current_type);
	@};

	<tuple-type>: (name, type) -> () = @{
		if (!types_add_typed_name(&c_current_type, c_current_table, &@=name,
			@&type, false)) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"type '%S' hasn't been declared", (void *) @&type);
		}
		nstring_destroy(&@=type);
	@};

	<tuple-ref-type>: (name, type) -> () = @{
		if (!types_add_typed_name(&c_current_type, c_current_table, &@=name,
			@&type, true)) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"type '%S' hasn't been declared", (void *) @&type);
		}
		nstring_destroy(&@=type);
	@};

	<tuple-name>: (string) -> () = @{
		types_add_name(&c_current_type, c_current_table, &@=string, false);
	@};


	/*
	 * Type assignment actions
	 */

	<assign>: (string) -> () = @{
		c_current_entry = table_get_type(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"assignment operation defined for unknown type '%S'", (void *) @&string);
		} else if (type_get_assign_code(entry_get_type(c_current_entry))) {
			err_mult("assignment", "type", @&string);
			c_current_entry = NULL;
		}
		nstring_destroy(&@=string);
	@};

	<x-assign>: (code) -> () = @{
		if (c_current_entry) {
			bool  errored = false;
			KeyT  *key     = entry_key (c_current_entry);
			TypeTupleT tmp;

			types_init(&tmp);
			types_add_type_entry(&tmp, c_current_entry, false);

			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("assignment", "parameter", "type", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types (&c_saved_type, &tmp)) {
				err_mismatch("parameter", "assignment", "type", key, &tmp, &c_saved_type);
				errored = true;
			}

			if (!types_disjoint_names (&c_current_type)) {
				err_clash("assignment", "result", "type", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types (&c_current_type, &tmp)) {
				err_mismatch("result", "assignment", "type", key, &tmp, &c_saved_type);
				errored = true;
			}

			if (types_intersect (&c_saved_type, &c_current_type)) {
				err_formal_clash("assignment", "type", key, &c_saved_type, &c_current_type);
				errored = true;
			}

			types_destroy(&tmp);
			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
			TypeT *type;

				type = entry_get_type (c_current_entry);
				c_code_check(@code, false, false, false, &c_saved_type, &c_current_type, c_current_table);
				type_set_assign_code(type,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};

	<passign>: (string) -> () = @{
		c_current_entry = table_get_type(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"parameter assignment operation defined for unknown type '%S'", (void *) @&string);
		} else if (type_get_param_assign_code(entry_get_type(c_current_entry))) {
			err_mult("parameter assignment", "type", @&string);
			c_current_entry = NULL;
		}
		nstring_destroy(&@=string);
	@};

	<x-passign>: (code) -> () = @{
		if (c_current_entry) {
			bool  errored = false;
			KeyT  *key     = entry_key(c_current_entry);
			TypeTupleT tmp;

			types_init(&tmp);
			types_add_type_entry(&tmp, c_current_entry, false);
			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("parameter assignment", "parameter", "type", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types(&c_saved_type, &tmp)) {
				err_mismatch("parameter", "parameter assignment", "type", key, &c_saved_type, &tmp);
				errored = true;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_clash("parameter assignment", "result", "type", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types(&c_current_type, &tmp)) {
				err_mismatch("result type", "parameter assignment", "type", key, &c_saved_type, &tmp);
				errored = true;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				err_formal_clash("parameter assignment", "type", key, &c_saved_type, &c_current_type);
				errored = true;
			}

			types_destroy(&tmp);
			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				TypeT *type = entry_get_type(c_current_entry);

				c_code_check(@code, false, false, false, &c_saved_type,
					&c_current_type, c_current_table);
				type_set_param_assign_code(type,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};

	<rassign>: (string) -> () = @{
		c_current_entry = table_get_type(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"result assignment operation defined for unknown type '%S'", (void *) @&string);
		} else if (type_get_result_assign_code(entry_get_type(c_current_entry))) {
			err_mult("result assignment", "type", @&string);
			c_current_entry = NULL;
		}
		nstring_destroy(&@=string);
	@};

	<x-rassign>: (code) -> () = @{
		if (c_current_entry) {
			bool  errored = false;
			KeyT  *key     = entry_key (c_current_entry);
			TypeTupleT tmp;

			types_init (&tmp);
			types_add_type_entry (&tmp, c_current_entry, false);
			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("result essignment", "parameter", "type", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types(&c_saved_type, &tmp)) {
				err_mismatch("parameter", "result assignment", "type", key, &c_saved_type, &tmp);
				errored = true;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_clash("result assignment", "result", "type", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types(&c_current_type, &tmp)) {
				err_mismatch("result", "result assignment", "type", key, &c_saved_type, &tmp);
				errored = true;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				err_formal_clash("result assignment", "type", key, &c_saved_type, &c_current_type);
				errored = true;
			}

			types_destroy (&tmp);
			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				TypeT *type = entry_get_type(c_current_entry);

				c_code_check(@code, false, false, false, &c_saved_type,
					&c_current_type, c_current_table);
				type_set_result_assign_code (type,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};


	/*
	 * Terminal result extraction actions
	 */

	<set-terminal>: (string) -> () = @{
		c_current_entry = table_get_basic(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"extraction operation defined for unknown terminal '%S'", (void *) @&string);
		} else {
			BasicT * basic = entry_get_basic(c_current_entry);

			if (basic_get_result_code(basic)) {
				err_mult("extraction", "terminal", @&string);
				c_current_entry = NULL;
			} else if (types_equal_zero_tuple(basic_result (basic))) {
				error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
					"extraction operation defined for terminal '%S' that returns nothing", (void *) @&string);
				c_current_entry = NULL;
			}
		}
		nstring_destroy(&@=string);
	@};

	/* TODO suspiciously repetitive */
	<x-set-terminal>: (code) -> () = @{
		if (c_current_entry) {
			BasicT     *basic   = entry_get_basic(c_current_entry);
			TypeTupleT *result  = basic_result(basic);
			bool       errored = false;
			KeyT       *key     = entry_key(c_current_entry);

			if (!types_disjoint_names(&c_saved_type)) {
				err_clash("extraction", "parameter", "terminal", key, &c_saved_type);
				errored = true;
			}

			if (!types_equal_zero_tuple(&c_saved_type)) {
				error_posn(ERR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
					"parameter type mismatch for extraction operation on "
					"terminal '%K' [%Y should be ()]",
					(void *) key, (void *) &c_saved_type);
				errored = true;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_clash("extraction", "result", "terminal", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types(&c_current_type, result)) {
				err_mismatch("result", "extraction", "terminal", key, &c_current_type, result);
				errored = true;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				err_formal_clash("extraction", "terminal", key, &c_saved_type, &c_current_type);
				errored = true;
			}

			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				types_destroy(&c_saved_type);
				c_code_check(@code, false, true, false, NULL, &c_current_type, c_current_table);
				basic_set_result_code(basic,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};


	/*
	 * Action definition actions
	 */

	<set-action>: (string) -> () = @{
		c_current_entry = table_get_action(c_current_table, @&string);
		if (c_current_entry == NULL) {
			error_posn(ERR_SERIOUS, c_lexer_stream_name(c_current_stream), (int) c_lexer_stream_line(c_current_stream),
				"definition for unknown action '%S'", (void *) @&string);
		} else {
			ActionT *action;

			action = entry_get_action(c_current_entry);
			if (action_get_code(action)) {
				error_posn(ERR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
					"multiple definitions for action '%S'", (void *) @&string);
				c_current_entry = NULL;
			}
		}
		nstring_destroy(&@=string);
	@};

	<x-set-action>: (code) -> () = @{
		if (c_current_entry) {
			ActionT    *action  = entry_get_action(c_current_entry);
			TypeTupleT *param   = action_param(action);
			TypeTupleT *result  = action_result(action);
			bool       errored = false;
			KeyT       *key     = entry_key(c_current_entry);

			if (!types_disjoint_names(&c_saved_type)) {
				err_field_clash("parameter", "action", key, &c_saved_type);
				errored = true;
			}

			if (!types_fillin_types(&c_saved_type, param)) {
				err_field_mismatch("parameter", key, &c_saved_type, param);
				errored = true;
			}

			if (!types_disjoint_names(&c_current_type)) {
				err_field_clash("result", "action", key, &c_current_type);
				errored = true;
			}

			if (!types_fillin_types(&c_current_type, result)) {
				err_field_mismatch("result", key, &c_saved_type, result);
				errored = true;
			}

			if (types_intersect(&c_saved_type, &c_current_type)) {
				error_posn(ERR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
					"formal clash for action '%K' [parameter = %Y, result = %Y]",
					(void *) key, (void *) &c_saved_type, (void *) &c_current_type);
				errored = true;
			}

			if (errored) {
				types_destroy(&c_saved_type);
				types_destroy(&c_current_type);
				c_code_deallocate(@code);
				c_current_entry = NULL;
			} else {
				c_code_check(@code, true, true, false, &c_saved_type, &c_current_type, c_current_table);
				types_propogate_mutations(param, &c_saved_type);
				action_set_code(action,  @code);
			}
		} else {
			types_destroy(&c_saved_type);
			types_destroy(&c_current_type);
			c_code_deallocate(@code);
		}
	@};

	<set-trailer1>: (code) -> () = @{
		c_code_check(@code, false, false, false, NULL, NULL, c_current_table);
		c_out_info_set_trailer1 (c_current_out_info, @code);
	@};

	<set-trailer2>: (code) -> () = @{
		c_code_check(@code, false, false, false, NULL, NULL, c_current_table);
		c_out_info_set_trailer2(c_current_out_info, @code);
	@};


	/*
	 * Code elements into code block
	 */

	<ccode-init>: (p :pos) -> (code :CCodeP) = @{
		@code = c_code_create(istream_name(&c_lexer_stream->istream), @p);
	@};

	<append-ccode-at>: (code :CCodeP) -> () = @{
		NStringT ns;
		nstring_copy_cstring(&ns, "@@");	/* TODO append '@@' to code buffer? */
		c_code_append_string(@code, &ns);	/* TODO really append_label()? */
	@};

	<append-ccode-exception>: (code :CCodeP) -> () = @{
		c_code_append_exception(@code);
	@};

	<append-ccode-terminal>: (code :CCodeP) -> () = @{
		c_code_append_terminal(@code);
	@};

	<append-ccode-advance>: (code :CCodeP) -> () = @{
		c_code_append_advance(@code);
	@};

	<append-ccode-basic>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_basic(@code, &@=i);
	@};

	<append-ccode-label>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_label(@code, &@=i);
	@};

	<append-ccode-reference>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_reference(@code, &@=i);
	@};

	<append-ccode-identifier>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_identifier(@code, &@=i);
	@};

	<append-ccode-modifiable>: (code :CCodeP, i :StringT &) -> () = @{
		c_code_append_modifiable(@code, &@=i);
	@};

	<append-ccode-codestring>: (code :CCodeP, s :StringT &) -> () = @{
		assert(!nstring_contains(&@=s, '@@'));	/* XXX '@@'? */
		c_code_append_string(@code, &@=s);
	@};

	<E-eof-in-code-block>: () -> () = @{
		error_posn(ERR_SERIOUS, istream_name(&c_lexer_stream->istream), (int) istream_line(&c_lexer_stream->istream),
			"end of file in C code block");
	@};


	/*
	 * Error recovery stuff
	 */

	<unhandled-syntax-error> = @{
		UNREACHED;
	@};

	<expected-identifier> = @{
		if (!c_propagating_error) {
			err_expected("identifier");
		}
	@};

	<expected-c-identifier> = @{
		if (!c_propagating_error) {
			err_expected("C identifier");
		}
	@};

	<expected-separator> = @{
		if (!c_propagating_error) {
			err_expected("','");
		}
	@};

	<expected-open-tuple> = @{
		if (!c_propagating_error) {
			err_expected("'('");
		}
	@};

	<expected-close-tuple> = @{
		if (!c_propagating_error) {
			err_expected("')'");
		}
	@};

	<expected-arrow> = @{
		if (!c_propagating_error) {
			err_expected("'->'");
		}
	@};

	<expected-terminator> = @{
		if (!c_propagating_error) {
			err_expected("';'");
		}
	@};

	<expected-end-action> = @{
		if (!c_propagating_error) {
			err_expected("'>'");
		}
	@};

	<expected-define> = @{
		if (!c_propagating_error) {
			err_expected("'='");
		}
	@};

	<expected-code> = @{
		if (!c_propagating_error) {
			err_expected("code block");
		}
	@};

	<expected-blt-header> = @{
		if (!c_propagating_error) {
			err_expected("'%header%'");
		}
	@};

	<expected-blt-terminals> = @{
		if (!c_propagating_error) {
			err_expected("'%terminals%'");
		}
	@};

	<expected-blt-actions> = @{
		if (!c_propagating_error) {
			err_expected("'%actions%'");
		}
	@};

	<expected-blt-trailer> = @{
		if (!c_propagating_error) {
			err_expected("'%trailer%'");
		}
	@};

	<expected-eof> = @{
		if (!c_propagating_error) {
			err_expected("end of file");
		}
	@};

	<destroy-string>: (string) -> () = @{
		nstring_destroy(&@=string);
	@};

	<skip-to-end-of-tuple-defn> = @{
		while (@. != @$EOF
			&& @. != @$DEFINE
			&& @. != @$CODE
			&& @. != @$SEPARATOR
			&& @. != @$CLOSE-TUPLE
			&& @. != @$TERMINATOR
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-prefix> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-MAPS
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ASSIGNMENTS
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-map> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-ASSIGNMENTS
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-assignment> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-PARAM-ASSIGN
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-param-assign> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-RESULT-ASSIGN
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER
				|| @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-result-assign> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-TERMINALS
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-terminal> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-ACTIONS
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-to-end-of-action> = @{
		while (@. != @$EOF
			&& @. != @$TERMINATOR
			&& @. != @$BLT-TRAILER) {
			if (@. == @$SID-IDENTIFIER
			|| @. == @$C-IDENTIFIER) {
				nstring_destroy(c_lexer_string_value(c_current_stream));
			} else if (@. == @$CODE) {
				c_code_deallocate(c_lexer_code_value(c_current_stream));
			}
			@>;
		}

		if (@. == @$SID-IDENTIFIER || @. == @$C-IDENTIFIER) {
			nstring_destroy(c_lexer_string_value(c_current_stream));
		}

		if (@. != @$EOF) {
			@>;
		}

		c_propagating_error = true;
	@};

	<skip-recover> = @{
		c_propagating_error = false;
	@};

	<is-close-tuple-or-skipped-or-eof>: () -> (predicate) = @{
		@predicate = (@. == @$CLOSE-TUPLE
			|| @. == @$EOF
			|| c_propagating_error);
	@};

%trailer% @{

@}, @{

@};
