<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="describing-the-structure">
	<title>Describing the structure</title>

	<para>The following examples show how TDF constructs are described in this
		document. The first is the construct <link linkend="floating">
		<replaceable>floating</replaceable></link>:</para>

	<programlisting language="tdf">fv: FLOATING_VARIETY
 -&gt; SHAPE</programlisting>

	<para>The constructs' arguments (one in this case) precede the
		&ldquo;<replaceable>-&gt;</replaceable>&rdquo; and the result follows it. Each
		argument is shown as follows:</para>

    <programlisting language="tdf">name: SORT</programlisting>

	<para>The name standing before the colon is for use in the accompanying English
		description within the specification. It has no other significance.</para>

	<para>The example given above indicates that <replaceable>floating</replaceable> takes
		one argument.	This argument, <replaceable>v</replaceable>, is of <code>SORT
		FLOATING_VARIETY</code>.	After the &ldquo;<code>-&gt;</code>&rdquo; comes
		the <code>SORT</code> of the result of <replaceable>floating</replaceable>. It is
		a <code>SHAPE</code>.</para>

	<para>In the case of <replaceable>floating</replaceable> the formal description supplies
		the syntax and the accompanying English text supplies the semantics.
		However, in the case of some constructs it is convenient to specify more
		information in the formal section. For example, the specification of the
		construct <link linkend="floating_negate"><replaceable>floating_negate</replaceable></link> not only
		states that it has an <code>EXP</code> argument and an <code>EXP</code>
		result:</para>

    <programlisting language="tdf">flpt_err: ERROR_TREATMENT
arg1:     EXP FLOATING(f)
 -&gt; EXP FLOATING(f)</programlisting>

	<para>it also supplies additional information about those <code>EXP</code>s.	It
		specifies that these expressions will be floating point numbers of the same
		kind.</para>

	<para>Some construct's arguments are optional. This is denoted as follows (from
		<link linkend="apply_proc"><replaceable>apply_proc</replaceable></link>):</para>

    <programlisting language="tdf">result_shape: SHAPE
p:            EXP PROC
params:       LIST(EXP)
var_param:    OPTION(EXP)
 -&gt; EXP result_shape</programlisting>

	<para><replaceable>var_param</replaceable> is an optional argument to the
		<replaceable>apply_proc</replaceable> construct shown above.</para>

	<para>Some constructs take a varying number of arguments.
		<replaceable>params</replaceable> in the above construct is an example. These are
		denoted by <code>LIST</code>. There is a similar construction,
		<code>SLIST</code>, which differs only in having a different encoding.</para>

	<para>Some constructs' results are governed by the values of their arguments.
		This is denoted by the &ldquo;<code>?</code>&rdquo; formation shown in the
		specification of the <link linkend="case"><replaceable>case</replaceable></link> construct
		shown below:</para>

    <programlisting language="tdf">exhaustive: BOOL
control:    EXP INTEGER(v)
branches:   LIST(CASELIM)
 -&gt; EXP (exhaustive ? BOTTOM : TOP)</programlisting>

	<para>If <replaceable>exhaustive</replaceable> is true, the resulting <code>EXP</code>
		has the <code>SHAPE BOTTOM</code>: otherwise it is <code>TOP</code>.</para>

	<para>Depending on a TDF-processing tool's purpose, not all of some constructs'
		arguments need necessarily be processed. For instance, installers do not
		need to process one of the arguments of the <replaceable>x_cond</replaceable>
		constructs (where <replaceable>x</replaceable> stands for a <code>SORT</code>,
		e.g. <link linkend="exp_cond"><replaceable>exp_cond</replaceable></link> .
		Secondly, standard tools might want to ignore embedded fragments of TDF
		adhering to some private standard. In these cases it is desirable for tools
		to be able to skip the irrelevant pieces of TDF. <code>BITSTREAM</code>s and
		<code>BYTESTREAM</code>s are formations which permit this. In the encoding
		they are prefaced with information about their length.</para>

	<para>Some constructs' arguments are defined as being <code>BITSTREAM</code>s or
		<code>BYTESTREAM</code>s, even though the constructs specify them to be of a
		particular <code>SORT</code>. In these cases the argument's
		<code>SORT</code> is denoted as, for example, <code>BITSTREAM
		FLOATING_VARIETY </code>.	This construct must have a
		<code>FLOATING_VARIETY</code> argument, but certain TDF-processing tools may
		benefit from being able to skip past the argument (which might itself be a
		very large piece of TDF) without having to read its content.</para>

	<para>The nature of the <code>UNIT</code>s in a <code>GROUP</code> is determined
		by unit identifications. These occur in <replaceable>make_capsule</replaceable>.
		The values used for unit identifications are specified in the text as
		follows:</para>

	<informaltable>
		<tr> <td>Unit identification</td> <td><replaceable>some_name</replaceable></td> </tr>
	</informaltable>

	<para>where <replaceable>some_name</replaceable> might be <replaceable>tokdec</replaceable>,
		<replaceable>tokdef</replaceable> etc.</para>

	<para>The kinds of linkable entity used are determined by linkable entity
		identifications. These occur in <replaceable>make_capsule</replaceable>. The
		values used for linkable entity identification are specified in the text as
		follows:</para>

	<informaltable>
		<tr> <td>Linkable entity identification</td> <td><replaceable>some_name</replaceable></td> </tr>
	</informaltable>

	<para>where <replaceable>some_name</replaceable> might be <replaceable>tag</replaceable>,
		<replaceable>token</replaceable> etc.</para>

	<para>The bit encodings are also specified in this document. The details are given
		in <link linkend="bit-encoding">The bit encoding of TDF</link>. This section describes
		the encoding in terms of information given with the descriptions of the
		<code>SORT</code>s and constructs.</para>

	<para>With each <code>SORT</code> the number of bits used to encode the constructs
		is given in the following form:</para>

	<informaltable>
		<tr> <td>Number of encoding bits</td> <td><replaceable>n</replaceable></td> </tr>
	</informaltable>

	<para>This number may be zero; if so the encoding is non-extendable. If it is
		non-zero the encoding may be extendable or non-extendable. This is specified
		in the following form:</para>

	<informaltable>
		<tr> <td>Is coding extendable</td> <td>yes/no</td> </tr>
	</informaltable>

	<para>With each construct the number used to encode it is given in the following
		form:</para>

	<informaltable>
		<tr> <td>Encoding number</td> <td><replaceable>n</replaceable></td> </tr>
	</informaltable>

	<para>If the number of encoding bits is zero, <replaceable>n</replaceable> will be zero.</para>

	<para>There may be a requirement that a component of a construct should start on a
		byte boundary in the encoding. This is denoted by inserting
		<code>BYTE_ALIGN</code> before the component <code>SORT</code>.</para>
</chapter>
