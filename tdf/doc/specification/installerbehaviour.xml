<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="installer-behavior">
	<title>Installer behavior</title>

	<section id="definition-of-terms">
		<title>Definition of terms</title>

		<para>In this document the behaviour of TDF installers is described in a precise
			manner. Certain words are used with very specific meanings. These are:</para>

		<itemizedlist>
			<listitem>
				<para>&ldquo;undefined&rdquo;: means that installers can perform any
					action, including refusing to translate the program. It can produce
					code with any effect, meaningful or meaningless.</para>
			</listitem>

			<listitem>
				<para>&ldquo;shall&rdquo;: when the phrase &ldquo;<replaceable>P</replaceable>
					shall be done&rdquo; (or similar phrases involving
					&ldquo;shall&rdquo;) is used, every installer must perform
					<replaceable>P</replaceable>.</para>
			</listitem>

			<listitem>
				<para>&ldquo;should&rdquo;: when the phrase &ldquo;<replaceable>P</replaceable>
					should be done&rdquo; (or similar phrase involving
					&ldquo;should&rdquo;) is used, installers are advised to perform
					<replaceable>P</replaceable>, and producer writers may assume it will be
					done if possible. This usage generally relates to optimisations which
					are recommended.</para>
			</listitem>

			<listitem>
				<para>&ldquo;will&rdquo;: when the phrase &ldquo;<replaceable>P</replaceable>
					will be true&rdquo; (or similar phrases involving
					&ldquo;will&rdquo;) is used to describe the composition of a TDF
					construct, the installer may assume that <replaceable>P</replaceable> holds
					without having to check it. If, in fact, a producer has produced TDF
					for which <replaceable>P</replaceable> does not hold, the effect is
					undefined.</para>
			</listitem>

			<listitem>
				<para>&ldquo;target-defined&rdquo;: means that behaviour will be defined,
					but that it varies from one target machine to another. Each target
					installer shall define everything which is said to be
					&ldquo;target-defined&rdquo;.</para>
			</listitem>
		</itemizedlist>
	</section>

	<section id="properties-of-installers">
		<title>Properties of installers</title>

		<para>All installers must implement all of the constructions of TDF. There are
			some constructions where the installers may impose limits on the ranges of
			values which are implemented. In these cases the description of the
			installer must specify these limits.</para>

		<para>Installers are not expected to check that the TDF they are processing is
			well-formed, nor that undefined constructs are absent. If the TDF is not
			well-formed any effect is permitted.</para>

		<para>Installers shall only implement optimisations which are correct in all
			circumstances. This correctness can only be shown by demonstrating the
			equivalence of the transformed program, from equivalences deducible from
			this specification or from the ordinary laws of arithmetic. No statements
			are made in this specification of the form &ldquo;such and such an
			optimisation is permitted&rdquo;.</para>

		<para>Fortran90 has a notion of mathematical equivalence which is not
			the same as TDF equivalence. It can be applied to transform programs
			provided parentheses in the text are not crossed. TDF does not acknowledge
			this concept. Such transformations would have to be applied in a context
			where the permitted changes are known.</para>
	</section>
</chapter>
