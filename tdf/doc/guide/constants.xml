<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="constants">
	<title>Constants</title>

	<para>The representation of constants clearly has peculiar difficulties
		in any architecture neutral format. Leaving aside any problems of how
		numbers are to be represented, we also have the situation where a
		"constant" can have different values on different platforms. An
		obvious example would be the size of a structure which, although it is
		a constant of any particular run of a program, may have different
		values on different machines. Further, this constant is in general the
		result of some computation involving the sizes of its components which
		are not known until the platform is chosen. In &tdf;, sizes are always
		derived from some EXP OFFSET constructed using the various OFFSET
		arithmetic operations on primitives like shape_offset and offset_zero.
		Most such EXP OFFSETs produced are in fact constants of the platform;
		they include field displacements of structure as well as their sizes.
		&tdf; assumes that, if these EXPs can be evaluated at translate-time
		(i.e. when the sizes and alignments of primitive objects are known),
		then they must be evaluated there. An example of why this is so arises
		in make_compound; the SHAPE of its result EXP depends on its
		<code>arg1</code> EXP OFFSET parameter and all SHAPEs must be
		translate-time values.</para>

	<para>An initialisation of a TAGDEF is a constant in this sense; <footnote>
			<para>However see also initial_value in
				<link linkend="definitions-and-declarations">section 3.2</link>.</para>
		</footnote> this allows one to ignore any difficulties about their order of
		evaluation in the UNIT and consequently the order of evaluation of
		UNITs.  Once again all the EXPs which are initialisations must be
		evaluated before the program is run; this obviously includes any
		make_proc or make_general_proc. . The limitation on an initialisation
		EXP to ensure this is basically that one cannot take the contents of a
		variable declared outside the EXP after all tokens and conditional
		evaluation is taken into account. In other words, each &tdf; translator
		effectively has an &tdf; interpreter which can do evaluation of
		expressions (including conditionals etc.) involving only constants
		such as numbers, sizes and addresses of globals. This corresponds very
		roughly to the kind of initialisations of globals that are permissible
		in C; for a more precise definition, see (<!-- <fix>S7.3</fix> -->).</para>

	<section id="cond-constructors">
		<title>_cond constructors</title>

		<para>Another place where translate-time evaluation of constants is
			mandated is in the various _cond constructors which give a kind of
			"conditional compilation" facility; every SORT which has a SORTNAME,
			other that TAG, TOKEN and LABEL, has one of these constructors e.g.
			exp_cond:</para>

		<programlisting language="tdf">control: EXP INTEGER(v)
e1:      BITSTREAM EXP x
e2:      BITSTREAM EXP y
 -&gt; EXP x or EXP y</programlisting>
  
		<para>The constant, <code>control</code>, is evaluated at translate time.
			If it is not zero the entire construction is replaced by the EXP in
			<code>e1</code>; otherwise it is replaced by the one in
			<code>e2</code>. In either case, the other BITSTREAM is totally
			ignored; it even does not need to be sensible &tdf;. This kind of
			construction is use extensively in C pre-processing directives e.g.:</para>

		<programlisting language="c">#if (sizeof(int) == sizeof(long)) ...</programlisting>
	</section>

	<section id="primitive-constant-constructors">
		<title>Primitive constant constructors</title>

		<para>Integer constants are constructed using make_int:</para>

		<programlisting language="tdf">v:     VARIETY
value: SIGNED_NAT
 -&gt; EXP INTEGER(v)</programlisting>
          
		<para>The SIGNED_NAT <code>value</code> is an encoding of the binary value
			required for the integer; this value must lie within the limits
			given by <code>v</code>. I have been rather slip-shod in writing
			down examples of integer constants earlier in this document; where I
			have written 1 as an integer EXP, for example, I should have written
			make_int(v, 1) where v is some appropriate VARIETY.</para>

		<para>Constants for both floats and strings use STRINGs. A constant
			string is just an particular example of make_nof_int:</para>

		<programlisting language="tdf">
v:   VARIETY
str: STRING(k, n)
 -&gt; EXP NOF(n, INTEGER(v))</programlisting>

		<para>Each unsigned integer in <code>str</code> must lie in the variety
			<code>v</code> and the result is the constant array whose elements
			are the integers considered to be of VARIETY <code>v</code>. An
			ASCII-C constant string might have <code>v</code> = variety(-128,127)
			and <code>k</code> = 7; however, make_nof_int can be used
			to make strings of any INTEGER VARIETY; a the elements of a Unicode
			string would be integers of size 16 bits.</para>

		<para>A floating constant uses a STRING which contains the ASCII
			characters of a expansion of the number to some base in
			make_floating:</para>

		<programlisting language="tdf">f:        FLOATING_VARIETY
rm:       ROUNDING_MODE
sign:     BOOL
mantissa: STRING(k, n)
base:     NAT
exponent: SIGNED_NAT
 -&gt; EXP FLOATING(f)</programlisting>

		<para>For a normal floating point number, each integer in
			<code>mantissa</code> is either the ASCII `.'-symbol or the ASCII
			representation of a digit of the representation in the given
			<code>base</code>; i.e. if c is the ASCII symbol, the digit value is
			c-'0'. The resulting floating point number has SHAPE FLOATING(f) and
			value <code>mantissa</code> * <code>base</code>
			<code>exponent</code> rounded according to <code>rm</code>. Usually
			the base will be 10 (sometimes 2) and the rounding mode to_nearest.
			Any floating-point evaluation of expressions done at translate-time
			will be done to an accuracy greater that implied by the
			FLOATING_VARIETY involved, so that floating constants will be as
			accurate as the platform permits.</para>

		<para>The make_floating construct does not apply apply to a complex
			FLOATING_VARIETY <code>f</code>; to construct a complex constant use
			make_complex with two make_floating arguments.</para>

		<para>Constants are also provided to give unique null values for
			pointers, label values and procs i.e.: make_null_ptr,
			make_null_local_lv and make_null_proc. Any significant use of these
			values (e.g. taking the contents of a null pointer) is undefined,
			but they can be assigned and used in tests in the normal way.</para>
	</section>
</chapter>

