<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="sorts-and-tokens">
	<title>SORTs and TOKENs</title>

	<para>In the syntax of language like C or Pascal, we find various
		syntactic units like &lt;Expression&gt;, &lt;Identifier&gt; etc. A
		SORT bears the same relation to &tdf; as these syntactic units bear to
		the language; roughly speaking, the syntactic unit &lt;Expression&gt;
		corresponds to the SORT EXP and &lt;Identifier&gt; to TAG. However,
		instead of using BNF to compose syntactic units from others, &tdf; uses
		explicit constructors to compose its SORTs; each constructor uses
		other pieces of &tdf; of specified SORTs to make a piece of its result
		SORT. For example, the constructor plus uses an ERROR_TREATMENT and
		two EXPs to make another EXP.</para>

	<para>At the moment, there are 58 different SORTS, from ACCESS to
		VARIETY given in tables 1 and 2. Some of these have familiar analogues
		in standard language construction as with EXP and TAG above. Others
		will be less familiar since &tdf; must concern itself with issues not
		normally addressed in language definitions. For example, the process
		of linking together &tdf; programs is at the root of the architecture
		neutrality of &tdf; and so must form an integral part of its definition.
		On the other hand, &tdf; is not meant to be a language readily
		accessible to the human reader or writer; computers handle it much
		more easily. Thus a great many choices have been made in the
		definition which would be intolerable in a standard language
		definition for the human programmer but which, paradoxically enough,
		make it much simpler for a computer to produce and analyse &tdf;.</para>

	<para>The SORTs and constructors in effect form a multi-sorted algebra.
		There were two principal reasons for choosing this algebraic form of
		definition. First, it is easy to extend - a new operation on existing
		constructs simply requires a new constructor.  Secondly, the algebraic
		form is highly amenable to the automatic construction of programs.
		Large parts of both &tdf; producers and &tdf; translators have been
		created by automatic transformation of the text of the specification
		document itself, by extracting the algebraic signature and
		constructing C program which can read or produce &tdf;. To this extent,
		one can regard the specification document as a formal description of
		the free algebra of &tdf; SORTs and constructors. Of course, most of the
		interesting parts of the definition of &tdf; lies in the equivalences of
		parts of &tdf;, so this formality only covers the easy bit.</para>

	<para>Another distinction between the &tdf; definition and language
		syntactic description is that &tdf; is to some extent conscious of its
		own SORTs so that it can specify a new construction of a given SORT.
		The analogy in normal languages would be that one could define a new
		construction with new syntax and say this is an example of an
		&lt;Expression&gt;, for example; I don't know of any standard language
		which permits this, although those of you with a historical bent might
		remember Algol-N which made a valiant attempt at it. Of course, the
		algebraic method of description makes it much easier to specify,
		rather than having to give syntax to provide the syntax for the new
		construction in a language.</para>

	<section>
		<title>Token applications and first-class SORTs</title>

		<para>A new construction is introduced by the SORT TOKEN; the
			constructors involving TOKENs allow one to give an expansion for the
			TOKEN in terms of other pieces of &tdf;, possibly including
			parameters. We can encapsulate a (possibly parameterised) fragment
			of &tdf; of a suitable SORT by giving it a TOKEN as identification.
			Not all of the SORTs are available for this kind of encapsulation
			- only those which have a SORTNAME constructor (from access to
			variety).  These are the "first-class" SORTs given in table 1.  Each
			of these have an appropriate _apply_token constructor (e.g.
			exp_apply_token) give the expansion. Most of these also have _cond
			constructors (e.g.see exp_cond in
			<link linkend="cond-constructors">section 9.1</link>)
			which allows translate time conditional expansion of the
			SORT.</para>

		<table>
			<title>First class <code>SORT</code>s</title>

			<col align="left"/>
			<col align="left"/>
			<col align="center"/>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th><code>SORT</code></th>
					<th>Usage</th>
					<th role="gap"/>
					<th><code>SORT</code></th>
					<th>Usage</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>ACCESS</code></td>
					<td>Properties of <code>TAG</code>s</td>
					<td role="gap"/>
					<td><code>AL_TAG</code></td>
					<td>Name for alignment</td>
				</tr>

				<tr>
					<td><code>ALIGNMENT</code></td>
					<td>Abstraction of data alignment</td>
					<td role="gap"/>
					<td><code>BITFIELD_VARIETY</code></td>
					<td>Gives number of bits in bit-field with sign</td>
				</tr>

				<tr>
					<td><code>BOOL</code></td>
					<td><code>true</code> or <code>false</code></td>
					<td role="gap"/>
					<td><code>ERROR_TREATMENT</code></td>
					<td>How to handle errors in operations</td>
				</tr>

				<tr>
					<td><code>EXP</code></td>
					<td>Piece of &tdf; program, manipulating values</td>
					<td role="gap"/>
					<td><code>FLOATING_VARIETY</code></td>
					<td>Kind of floating point number of unbounded size</td>
				</tr>

				<tr>
					<td><code>LABEL</code></td>
					<td>Mark on <code>EXP</code> to jump to</td>
					<td role="gap"/>
					<td><code>NAT</code></td>
					<td>Non-negative static number of unbounded size</td>
				</tr>

				<tr>
					<td><code>NTEST</code></td>
					<td>Test in comparisons</td>
					<td role="gap"/>
					<td><code>PROCPROPS</code></td>
					<td>Properties of calls and definitions of procedures</td>
				</tr>

				<tr>
					<td><code>ROUNDING_MODE</code></td>
					<td>How to round floating point operations</td>
					<td role="gap"/>
					<td><code>SHAPE</code></td>
					<td>Abstraction of size and representation of values</td>
				</tr>

				<tr>
					<td><code>SIGNED_NAT</code></td>
					<td>Static number of unbounded size</td>
					<td role="gap"/>
					<td><code>STRING</code></td>
					<td>Static string of n-bit integers</td>
				</tr>

				<tr>
					<td><code>TAG</code></td>
					<td>Name for a value in run-time program</td>
					<td role="gap"/>
					<td><code>TRANSFER_MODE</code></td>
					<td>Controls special contents and assignment operations</td>
				</tr>

				<tr>
					<td><code>TOKEN</code></td>
					<td>Installation-time function</td>
					<td role="gap"/>
					<td><code>VARIETY</code></td>
					<td>Kind of integer used in run-time program</td>
				</tr>
			</tbody>
		</table>

		<para>Every TOKEN has a result SORT, i.e. the SORT of its resulting
			expansion and before it can be expanded, one must have its parameter
			SORTs. Thus, you can regard a TOKEN as having a type defined by its
			result and parameter SORTs and the _apply_token as the operator
			which expands the encapsulation and substitutes the
			parameters.</para>

		<para>However, if we look at the signature of exp_apply_token:</para>

		<programlisting language="tdf">token_value: TOKEN
token_args:  BITSTREAM param_sorts(token_value)
 -&gt; EXP x</programlisting>

		<para>we are confronted by the mysterious BITSTREAM where one might
			expect to find the actual parameters of the TOKEN.</para>

		<para>To explain BITSTREAMs requires a diversion into the bit-encoding
			of &tdf;. Constructors for a particular SORT are represented in a
			number of bits depending on the number of constructors for that
			SORT; the context will determine the SORT required, so no more bits
			are required. Thus since there is only one constructor for UNITs, no
			bits are required to represent make_unit; there are about 120
			different constructors for EXPs so 7 bits are required to cover all
			the EXPs. The parameters of each constructor have known SORTs and so
			their representations are just concatenated after the representation
			of the constructor. <footnote>
				<para>There are facilities to allow extensions to the
					number of constructors, so it is not quite as simple as
					this.</para>
			</footnote>
			While this is a very compact representation, it suffers from the
			defect that one must decode it even just to skip over it. This is
			very irksome is some applications, notably the &tdf; linker which is
			not interested detailed expansions.  Similarly, in translators there
			are places where one wishes to skip over a token application without
			knowledge of the SORTs of its parameters. Thus a BITSTREAM is just
			an encoding of some &tdf;, preceded by the number of bits it occupies.
			Applications can then skip over BITSTREAMs trivially.  Similar
			considerations apply to BYTESTREAMs used elsewhere; here the
			encoding is preceded by the number of bytes in the encoding and is
			aligned to a byte boundary to allow fast copying.</para>
	</section>

	<section>
		<title>Token definitions and declarations</title>

		<para>Thus the <code>token_args</code> parameter of
			exp_apply_token is just the BITSTREAM formed from the actual
			parameters in the sequence described by the definition of the
			<code>token_value</code> parameter. This will be given in
			a TOKEN_DEFN somewhere with constructor token_definition:</para>

		<programlisting language="tdf">result_sort: SORTNAME
tok_params:  LIST(TOKFORMALS)
body:        result_sort
 -&gt; TOKEN_DEFN</programlisting>

			<para>The <code>result_sort</code> is the SORT of the construction of
				<code> body</code>; e.g. if <code>result_sort</code> is formed from
				exp then <code>body</code> would be constructed using the EXP
				constructors and one would use exp_apply_token to give the
				expansion. The list <code>tok_params</code> gives the formal
				parameters of the definition in terms of TOKFORMALS constructed
				using make_tok_formals:</para>

			<programlisting language="tdf">sn: SORTNAME
tk: TDFINT
 -&gt; TOKFORMALS</programlisting>

		<para>The TDFINT <code>tk</code> will be the integer representation of
			the formal parameter expressed as a TOKEN whose result sort is
			<code>sn</code> (see more about name representation in
			<link linkend="make_capsule-and-name-spaces">section 3.1</link>). To
			use the parameter in the body of the TOKEN_DEFN, one simply uses the
			_apply_token appropriate to <code>sn</code>.Note that sn may be a
			TOKEN but the <code>result_sort</code> may not.</para>

		<para>Hence the BITSTREAM
			<code>param_sorts</code>(<code>token_value</code>) in the
			actual parameter of exp_apply_token above is simply formed by the
			catenation of constructions of the SORTs given by the SORTNAMEs in
			the <code>tok_params</code> of the TOKEN being expanded.</para>

		<para>Usually one gives a name to a TOKEN_DEFN to form a TOKDEF
			using make_tokdef:</para>

		<programlisting language="tdf">tok:       TDFINT
signature: OPTION(STRING)
def:       BITSTREAM TOKEN_DEFN
 -&gt; TOKDEF</programlisting>

		<para>Here, <code>tok</code> gives the name that will be used to
			identify the TOKEN whose expansion is given by <code>def</code>. Any
			use of this TOKEN (e.g. in exp_apply_token) will be given by
			make_token(<code>tok</code>). Once again, a BITSTREAM is used to
			encapsulate the TOKEN_DEFN.</para>

		<para>The significance of the signature parameter is discussed in
			<link linkend="declaration-and-definition-signatures">section
			3.2.2</link>.</para>

		<para>Often, one wishes a token without giving its definition - the
			definition could, for example, be platform-dependent. A TOKDEC
			introduces such a token using make_tokdec:</para>

		<programlisting language="tdf">tok:       TDFINT
signature: OPTION(STRING)
s:         SORTNAME
 -&gt; TOKDEC</programlisting>

		<para>Here the SORTNAME, <code>s</code>, is given by token:</para>

		<programlisting language="tdf">result: SORTNAME
params: LIST(SORTNAME)
 -&gt; SORTNAME</programlisting>

		<para>which gives the result and parameter SORTs of
			<code>tok</code>.</para>

		<para>One can also use a TOKEN_DEFN in an anonymous fashion by giving
			it as an actual parameter of a TOKEN which itself demands a TOKEN
			parameter. To do this one simply uses use_tokdef:</para>

		<programlisting language="tdf">tdef: BITSTREAM TOKEN_DEFN
 -&gt; TOKEN</programlisting>
	</section>

	<section>
		<title>A simple use of a TOKEN</title>

		<para>The crucial use of TOKENs in &tdf; is to provide abstractions of
			&api;s (see <link linkend="tokens-and-apis">section 10</link>) but
			they are also used as shorthand for commonly occurring
			constructions. For example, given the &tdf; constructor plus,
			mentioned above, we could define a plus with only two EXP parameters
			more suitable to C by using the wrap constructor as the
			ERROR_TREATMENT:</para>

		<programlisting language="tdf">make_tokdef(C_plus, empty, token_definition(exp(), (make_tokformals(exp(), l),
                                                    make_tokformals(exp(), r)),
            plus(wrap(), exp_apply_token(l, ()), exp_apply_token(r, ())))</programlisting>
	</section>

	<section>
		<title>Second class SORTs</title>

		<para>Second class SORTs (given in table 2<!-- TODO: link -->) cannot be
			TOKENised. These are the "syntactic units" of &tdf; which the user
			cannot extend; he can only produce them using the constructors
			defined in core-&tdf;.</para>

		<para>Some of these constructors are implicit. For example, there are
			no explicit constructors for LIST or SLIST which are both used to
			form lists of SORTs; their construction is simply part of the
			encoding of &tdf;. However, it is forseen that LIST constructors would
			be highly desireable and there will probably extensions to &tdf; to
			promote LIST from a second-class SORT to a first-class one. This
			will not apply to SLIST or to the other SORTs which have implicit
			constructions. These include BITSTREAM, BYTESTREAM, TDFINT, TDFIDENT
			and TDFSTRING.</para>

		<table>
			<title><code>SORT</code>s without <code>SORTNAME</code>s</title>

			<col align="left"/>
			<col align="left"/>
			<col align="center"/>
			<col align="left"/>
			<col align="left"/>

			<thead>
				<tr>
					<th><code>SORT</code></th>
					<th>Usage</th>
					<th role="gap"/>
					<th><code>SORT</code></th>
					<th>Usage</th>
				</tr>
			</thead>

			<tbody>
				<tr>
					<td><code>AL_TAGDEF</code></td>
					<td>Alignment name definition</td>
					<td role="gap"/>
					<td><code>AL_TAGDEF_PROPS</code></td>
					<td>Body of <code>UNIT</code> containing <code>AL_TAGDEF</code>s</td>
				</tr>

				<tr>
					<td><code>BITSTREAM</code></td>
					<td>Encapsulation of a bit encoding</td>
					<td role="gap"/>
					<td><code>BYTESTREAM</code></td>
					<td>Encapsulation of a byte encoding</td>
				</tr>

				<tr>
					<td><code>CALLEES</code></td>
					<td>Actual callee parameters</td>
					<td role="gap"/>
					<td><code>CAPSULE</code></td>
					<td>Independent piece of &tdf; program</td>
				</tr>

				<tr>
					<td><code>CAPSULE_LINE</code></td>
					<td>Number and kind of linkable entities in <code>CAPSULE</code></td>
					<td role="gap"/>
					<td><code>CASELIM</code></td>
					<td>Bounds in <code>case</code> constructor</td>
				</tr>

				<tr>
					<td><code>ERROR_CODE</code></td>
					<td>Encoding for exceptions</td>
					<td role="gap"/>
					<td><code>EXTERNAL</code></td>
					<td>External name used to connect <code>CAPSULE</code> name</td>
				</tr>

				<tr>
					<td><code>EXTERN_LINK</code></td>
					<td>List of <code>LINKEXTERN</code>s in <code>CAPSULE</code></td>
					<td role="gap"/>
					<td><code>GROUP</code></td>
					<td>List of <code>UNIT</code>s with same identification</td>
				</tr>

				<tr>
					<td><code>LINK</code></td>
					<td>Connects names in <code>CAPSULE</code></td>
					<td role="gap"/>
					<td><code>LINKEXTERN</code></td>
					<td>Used to connect <code>CAPSULE</code> names to outside world</td>
				</tr>

				<tr>
					<td><code>LINKS</code></td>
					<td>List of <code>LINK</code>s</td>
					<td role="gap"/>
					<td><code>LIST(AUX)</code></td>
					<td>List of <code>AUX</code> <code>SORT</code>s; may have <code>SORTNAME</code> later</td>
				</tr>

				<tr>
					<td><code>OTAGEXP</code></td>
					<td>Describes a formal parameter</td>
					<td role="gap"/>
					<td><code>PROPS</code></td>
					<td>Program info in a <code>UNIT</code></td>
				</tr>

				<tr>
					<td><code>SLIST(AUX)</code></td>
					<td>List of <code>AUX</code> <code>SORT</code>s; will not have <code>SORTNAME</code> later</td>
					<td role="gap"/>
					<td><code>SORTNAME</code></td>
					<td><code>SORT</code> which can be parameter of <code>TOKEN</code></td>
				</tr>

				<tr>
					<td><code>TAGACC</code></td>
					<td>Used in constructing proc formals</td>
					<td role="gap"/>
					<td><code>TAGDEC</code></td>
					<td>Declaration of <code>TAG</code> at <code>UNIT</code> level</td>
				</tr>

				<tr>
					<td><code>TAGDEC_PROPS</code></td>
					<td>Body of <code>UNIT</code> containing <code>TAGDEC</code>s</td>
					<td role="gap"/>
					<td><code>TAGDEF</code></td>
					<td>Definition of <code>TAG</code> at <code>UNIT</code> level</td>
				</tr>

				<tr>
					<td><code>TAGDEF_PROPS</code></td>
					<td>Body of <code>UNIT</code> containing <code>TAG</code> <code>DEF</code>s</td>
					<td role="gap"/>
					<td><code>TAGSHACC</code></td>
					<td>A formal parameter</td>
				</tr>

				<tr>
					<td><code>TDFBOOL</code></td>
					<td>&tdf; encoding of a boolean</td>
					<td role="gap"/>
					<td><code>TDFIDENT</code></td>
					<td>&tdf; encoding of a byte string</td>
				</tr>

				<tr>
					<td><code>TDFINT</code></td>
					<td>&tdf; encoding of an integer</td>
					<td role="gap"/>
					<td><code>TDFSTRING</code></td>
					<td>&tdf; encoding of an n-bit byte string</td>
				</tr>

				<tr>
					<td><code>TOKDEC</code></td>
					<td>Declaration of a <code>TOKEN</code></td>
					<td role="gap"/>
					<td><code>TOKDEC_PROPS</code></td>
					<td>Body of <code>UNIT</code> contianing <code>TOKDEC</code>s</td>
				</tr>

				<tr>
					<td><code>TOKDEF</code></td>
					<td>Definition of a <code>TOKEN</code></td>
					<td role="gap"/>
					<td><code>TOKDEF_PROPS</code></td>
					<td>Body of <code>UNIT</code> contianing <code>TOKDEF</code>s</td>
				</tr>

				<tr>
					<td><code>TOKEN_DEFN</code></td>
					<td>Defines <code>TOKEN</code> expansion</td>
					<td role="gap"/>
					<td><code>TOKFORMALS</code></td>
					<td>Sort and name for parameters in <code>TOKEN_DEFN</code></td>
				</tr>

				<tr>
					<td><code>UNIQUE</code></td>
					<td>World-wide name</td>
					<td role="gap"/>
					<td><code>UNIT</code></td>
					<td>Components of <code>CAPSULE</code> with <code>LINK</code>s to other <code>UNIT</code>s</td>
				</tr>

				<tr>
					<td><code>VERSION</code></td>
					<td>Version number of &tdf;</td>
					<td role="gap"/>
					<td><code>VERSION_PROPS</code></td>
					<td>Body of <code>UNIT</code> contianing version information</td>
				</tr>
			</tbody>
		</table>
	</section>
</chapter>

