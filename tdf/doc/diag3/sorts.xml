<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter SYSTEM "minidocbook.dtd">

<chapter id="diagnostic-sorts">
	<title>Diagnostic SORTs</title>

	<para>As a summary of this section:</para>

	<itemizedlist>
		<listitem>
			<para><code>DIAG_TYPE</code>s describe programming language types
				(e.g. arrays, structs...). <code>DIAG_TQ</code>s are qualifiers
				of <code>DIAG_TYPE</code>s used for attributes like volatile
				and const.</para>
		</listitem>

		<listitem>
			<para><code>FILENAME</code>s and <code>SOURCEMARK</code>s describe
				source files and locations within them.</para>
		</listitem>

		<listitem>
			<para><code>DIAG_TAG</code>s associate integers with
				<code>DIAG_TYPE</code>s. They are used in a similar manner to
				normal TDF <code>TAG</code>s, and are held in a (TDF) linkable
				unit called a <code>DIAG_TYPE_UNIT</code>.</para>
		</listitem>

		<listitem>
			<para><code>DIAG_UNIT</code>s hold a collection of
				<code>DIAG_DESCRIPTOR</code>s, used for information outside
				procedure bodies.</para>
		</listitem>
	</itemizedlist>
  
	<section id="diag_descriptor">
		<title>DIAG_DESCRIPTOR</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_DESCRIPTOR encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>2</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>
		</informaltable>

		<para><code>DIAG_DESCRIPTOR</code>s are used to associate names in the
			source program with diagnostic items.</para>

			<section id="diag_desc_id">
				<title>diag_desc_id</title>

				<informaltable>
				<!-- TODO: <phrase>diag_desc_id encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">src_name: TDFSTRING(k, n)
whence:   SOURCEMARK
found_at: EXP POINTER(al)
type:     DIAG_TYPE
 -&gt; DIAG_DESCRIPTOR</programlisting>

			<para>Generates a descriptor for an identifier (of
				<code>DIAG_TYPE</code> <varname>type</varname>), whose source name
				was <varname>src_name</varname> from source location
				<varname>whence</varname>. The <code>EXP</code>
				<varname>found_at</varname> describes how to access the value.	Note
				that the <code>EXP</code> need not be unique (e.g. FORTRAN
				EQUIVALENCE might be implemented this way).</para>
		</section>

		<section id="diag_desc_struct">
			<title>diag_desc_struct</title>

			<informaltable>
				<!-- TODO: <phrase>diag_desc_struct encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>2</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">src_name: TDFSTRING(k, n)
whence:   SOURCEMARK
new_type: DIAG_TYPE
 -&gt; DIAG_DESCRIPTOR</programlisting>

			<para>Generates a descriptor whose source name was
				<varname>src_name</varname>.	<varname>new_type</varname> must be
				either a <code>DIAG_STRUCT</code>, <code>DIAG_UNION</code> or
				<code>DIAG_ENUM</code>.</para>

			<para>This construct is obsolete.</para>	<!-- TODO: note -->
		</section>

		<section id="diag_desc_typedef">
			<title>diag_desc_typedef</title>
				
			<informaltable>
				<!-- TODO: <phrase>diag_desc_typedef encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>3</td>
				</tr>
			</informaltable>

			<!-- TODO perhaps these should be tables without headings? -->
			<programlisting language="tdf">src_name: TDFSTRING(k, n)
whence:   SOURCEMARK
new_type: DIAG_TYPE
 -&gt; DIAG_DESCRIPTOR</programlisting>
        
			<para>Generates a descriptor for a type <varname>new_type</varname>
				whose source name was <varname>src_name</varname>. Note that
				<varname>diag_desc_typedef</varname> is used for associating a name
				with a type, rather than for any name given in the initial
				description of the type (e.g. in C this is used for typedef, not for
				struct/union/enum tags).</para>
		</section>
	</section>

	<section id="diag_unit">
		<title>DIAG_UNIT</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_UNIT encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>0</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>no</td>
			</tr>

			<tr>
				<td>Unit identification:</td>
				<td><varname>diagdef</varname></td>
			</tr>
		</informaltable>

		<para>A <code>DIAG_UNIT</code> is a TDF unit containing
			<code>DIAG_DESCRIPTOR</code>s. A <code>DIAG_UNIT</code> is used to
			contain descriptions of items outside procedure bodies (e.g.  global
			variables, global type definitions).</para>

		<section id="build_diag_unit">
			<title>build_diag_unit</title>

			<informaltable>
				<!-- TODO: <phrase>build_diag_unit encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>0</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">no_labels:   TDFINT
descriptors: SLIST(DIAG_DESCRIPTOR)
 -&gt; DIAG_UNIT</programlisting>

			<para>Create a <code>DIAG_UNIT</code> containing
				<code>DIAG_DESCRIPTOR</code>s. <varname>no_labels</varname> is the
				number of local labels used in <varname>descriptors</varname> (for
				conditionals).</para>
		</section>
	</section>

	<section id="diag_tag">
		<title>DIAG_TAG</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_TAG encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>1</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>

			<tr>
				<td>Linkable entity identification:</td>
				<td><varname>diagtag</varname></td>
			</tr>
		</informaltable>

		<para><code>DIAG_TAG</code>s are used inter alia to break cyclic
			diagnostic types.  They are (TDF) linkable entities.  A
			<code>DIAG_TAG</code> is made from a number, and used in
			<varname>use_diag_tag</varname> to obtain the <code>DIAG_TYPE</code>
			associated with that number by
			<varname>make_diag_tagdef</varname>.</para>

		<section id="make_diag_tag">
			<title>make_diag_tag</title>

			<informaltable>
				<!-- TODO: <phrase>make_diag_tag encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">num: TDFINT
 -&gt; DIAG_TAG</programlisting>

			<para>Create a <code>DIAG_TAG</code> from
				<varname>num</varname>.</para>
		</section>
	</section>

	<section id="diag_tagder">
		<title>DIAG_TAGDEF</title>

		<informaltable>
		<!-- TODO: <phrase>DIAG_TAGDEF encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>1</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>
		</informaltable>

		<para><code>DIAG_TAGDEF</code>s associate <code>DIAG_TAG</code>s with
			<code>DIAG_TYPE</code> s.</para>

		<section id="make_diag_tagdef">
			<title>make_diag_tagdef</title>

			<informaltable>
				<!-- TODO: <phrase>make_diag_tagdef encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">tno:   TDFINT
dtype: DIAG_TYPE
 -&gt; DIAG_TAGDEF</programlisting>

			<para>Associates tag number <varname>tno</varname> with
				<varname>dtype</varname>.</para>
		</section>
	</section>

	<section id="diag_type_unit">
		<title>DIAG_TYPE_UNIT</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_TYPE_UNIT encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>0</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>no</td>
			</tr>

			<tr>
				<td>Unit identification:</td>
				<td><varname>diagtype</varname></td>
			</tr>
		</informaltable>

		<para>A <code>DIAG_TYPE_UNIT</code> is a TDF unit containing
			<code>DIAG_TAGDEF</code>s.</para>

		<section id="build_diagtype_unit">
			<title>build_diagtype_unit</title>

			<informaltable>
				<!-- TODO: <phrase>build_diagtype_unit encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>0</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">no_labels: TDFINT
tagdefs:   SLIST(DIAG_TAGDEF)
 -&gt; DIAG_TYPEUNIT</programlisting>

			<para>Create a <code>DIAG_TYPEUNIT</code> containing
				<code>DIAG_TAGDEF</code>s. <varname>no_labels</varname> is the number
				of local labels used in <varname>tagdefs</varname> (for
				conditionals).</para>
		</section>
	</section>

	<section id="diag_type">
		<title>DIAG_TYPE</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_TYPE encoding</phrase> -->
			<tr>
				<td>Sortname:</td>
				<td><varname>foreign_sort("diag_type")</varname></td>
			</tr>

			<tr>
				<td>Number of encoding bits:</td>
				<td>4</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>
		</informaltable>

		<para><code>DIAG_TYPE</code>s are used to provide diagnostic
			information about data types.</para>

		<section id="diag_type_apply_token">
			<title>diag_type_apply_token</title>

			<informaltable>
				<!-- TODO: <phrase>diag_type_apply_token encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">token_value: TOKEN
token_args:  BITSTREAM
 -&gt; DIAG_TYPE</programlisting>

			<para>The token is applied to the arguments to give a
				<code>DIAG_TYPE</code>. If there is a definition for
				<varname>token_value</varname> in the <code>CAPSULE</code> then
				<varname>token_args</varname> is a <code>BITSTREAM</code> encoding of
				the <code>SORT</code>s of its parameters, in the order
				specified.</para>
		</section>

		<section id="diag_array">
			<title>diag_array</title>

			<informaltable>
				<!-- TODO: <phrase>diag_array encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>2</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">element_type: DIAG_TYPE
stride:       EXP OFFSET(p,p)
lower_bound:  EXP INTEGER(v)
upper_bound:  EXP INTEGER(v)
index_type:   DIAG_TYPE
 -&gt; DIAG_TYPE</programlisting>

			<para>An array of <varname>element_type</varname> objects.
				<varname>stride</varname> is the <code>OFFSET</code> between elements
				of the array (i.e. <varname>p</varname> is described by
				<varname>element_type</varname>). The bounds are in general not
				runtime constants, hence the values are <code>EXP</code>s (not say
				<code>SIGNED_NAT</code>). The <code>VARIETY</code>
				<varname>v</varname> is described by <varname>index_type</varname>. As
				in TDF there is no multi-dimensional array primitive.</para>
		</section>

		<section id="diag_bitfield">
			<title>diag_bitfield</title>

			<informaltable>
				<!-- TODO: <phrase>diag_bitfield encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>3</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">type:           DIAG_TYPE
number_of_bits: NAT
 -&gt; DIAG_TYPE</programlisting>

			<para>Describes <varname>number_of_bits</varname>, which when extracted
				will have <code>DIAG_TYPE</code> <varname>type</varname>.</para>
		</section>

		<section id="diag_enum">
			<title>diag_enum</title>

			<informaltable>
				<!-- TODO: <phrase>diag_enum encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>4</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">base_type: DIAG_TYPE
enum_name: TDFSTRING(k, n)
values:    LIST(ENUM_VALUES)
 -&gt; DIAG_TYPE</programlisting>

			<para>An enumeration to be stored in an object of type
				<varname>base_type</varname>.  If <varname>enum_name</varname> is a
				string contining zero characters this signifies no source tag.</para>
		</section>

		<section id="diag_floating_variety">
			<title>diag_floating_variety</title>

			<informaltable>
				<!-- TODO: <phrase>diag_floating_variety encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>5</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">var: FLOATING_VARIETY
 -&gt; DIAG_TYPE</programlisting>

			<para>Creates a <code>DIAG_TYPE</code> to describe an
				<code>FLOATING_VARIETY</code> <varname>var</varname>.</para>
		</section>

		<section id="diag_loc">
			<title>diag_loc</title>

			<informaltable>
				<!-- TODO: <phrase>diag_loc encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>6</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">object:    DIAG_TYPE
qualifier: DIAG_TQ
 -&gt; DIAG_TYPE</programlisting>

			<para>Records the existence of an item of <code>DIAG_TYPE</code>
				<varname>object</varname>, qualified by <varname>qualifier</varname>.
				<varname>diag_loc</varname> is used for variables (which may of course
				not actually occupy a memory location).</para>
		</section>

		<section id="diag_proc">
			<title>diag_proc</title>

			<informaltable>
				<!-- TODO: <phrase>diag_proc encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>7</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">params:        LIST(DIAG_TYPE)
optional_args: BOOL
result_type:   DIAG_TYPE
 -&gt; DIAG_TYPE</programlisting>

			<para>Describes a procedure taking <varname>n</varname> parameters.
				<varname>optional_args</varname> is true if and only if the
				<varname>make_proc</varname> which this <varname>diag_proc</varname>
				describes had <varname>vartag</varname> present.</para>
		</section>

		<section id="diag_ptr">
			<title>diag_ptr</title>

			<informaltable>
				<!-- TODO: <phrase>diag_ptr encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>8</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">object:    DIAG_TYPE
qualifier: DIAG_TQ
 -&gt; DIAG_TYPE</programlisting>

			<para>Describes a pointer to an object of <code>DIAG_TYPE</code>
				<varname>object</varname>. The <code>DIAG_TQ</code> qualifier
				<varname>qualifier</varname> qualifies the pointer, not the object
				pointed to.</para>
		</section>

		<section id="diag_struct">
			<title>diag_struct</title>

			<informaltable>
				<!-- TODO: <phrase>diag_struct encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>9</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">tdf_shape: SHAPE
src_name:  TDFSTRING(k, n)
fields:    LIST(DIAG_FIELD)
 -&gt; DIAG_TYPE</programlisting>

			<para>Describes a structure. If <varname>src_name</varname> is a string
				contining zero characters this signifies no source tag for the whole
				structure.  <varname>tdf_shape</varname> allows the total size to be
				computed.</para>
		</section>

		<section id="diag_type_null">
			<title>diag_type_null</title>

			<informaltable>
				<!-- TODO: <phrase>diag_type_null encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>10</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"> -&gt; DIAG_TYPE</programlisting>

			<para>A null <code>DIAG_TYPE</code>.</para>
		</section>

		<section id="diag_union">
			<title>diag_union</title>

			<informaltable>
				<!-- TODO: <phrase>diag_union encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>11</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">tdf_shape: SHAPE
src_name:  TDFSTRING(k, n)
fields:    LIST(DIAG_FIELD)
 -&gt; DIAG_TYPE</programlisting>

			<para>Describes a union. If <varname>src_name</varname> is a string
				contining zero characters this signifies no source tag for the whole
				union.  <varname>tdf_shape</varname> allows the total size to be
				computed.</para>
		</section>

		<section id="diag_variety">
			<title>diag_variety</title>

			<informaltable>
				<!-- TODO: <phrase>diag_variety encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>12</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">var: VARIETY
 -&gt; DIAG_TYPE</programlisting>

			<para>Creates a <code>DIAG_TYPE</code> to describe an integer
				<code>VARIETY</code> <varname>var</varname>.</para>
		</section>

		<section id="use_diag_tag">
			<title>use_diag_tag</title>

			<informaltable>
				<!-- TODO: <phrase>use_diag_tag encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>13</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">dtag: DIAG_TAG
 -&gt; DIAG_TYPE</programlisting>

			<para>Obtains the <code>DIAG_TYPE</code> associated with
				<code>DIAG_TAG</code> <varname>dtag</varname>.</para>
		</section>
	</section>

	<section id="enum_values">
		<title>ENUM_VALUES</title>

		<informaltable>
			<!-- TODO: <phrase>ENUM_VALUES encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>0</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>no</td>
			</tr>
		</informaltable>

		<section id="make_enum_values_list">
			<title>make_enum_values_list</title>

			<informaltable>
				<!-- TODO: <phrase>make_enum_values_list encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>0</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">value:    EXP <varname>sh</varname>
src_name: TDFSTRING(k, n)
 -&gt; ENUM_VALUES</programlisting>

			<para><code>ENUM_VALUES</code> describe elements of an enumerated type.
				<varname>src_name</varname> is the source language name.
				<varname>value</varname> evaluates to a value of <code>SHAPE</code>
				<varname>sh</varname>. Note that all members of a
				<code>LIST(ENUM_VALUES</code>) must have the same
				<varname>sh</varname>.</para>
		</section>
	</section>

	<section id="diag_field">
		<title>DIAG_FIELD</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_FIELD encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>0</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>no</td>
			</tr>
		</informaltable>

		<section id="make_diag_field">
			<title>make_diag_field</title>

			<informaltable>
				<!-- TODO: <phrase>make_diag_field encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>0</td>
				</tr>
			</informaltable>

			<programlisting language="tdf">field_name: TDFSTRING(k, n)
found_at:   EXP OFFSET(ALIGNMENT whole, ALIGNMENT this_field)
field_type: DIAG_TYPE
 -&gt; DIAG_FIELD</programlisting>

			<para><code>DIAG_FIELD</code>s describe one field of a structure or
				union.  <varname>field_name</varname> is the source language name.
				<varname>found_at</varname> is the <code>OFFSET</code> between
				<varname>whole</varname> (the enclosing structure or union), and this
				field (<varname>this_field</varname>).  <varname>field_type</varname>
				is the <code>DIAG_TYPE</code> of the field.</para>
		</section>
	</section>

	<section id="diag_tq">
		<title>DIAG_TQ</title>

		<informaltable>
			<!-- TODO: <phrase>DIAG_TQ encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>2</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>
		</informaltable>

		<para><code>DIAG_TQ</code>s are type qualifiers, used to qualify
			<code>DIAG_TYPE</code>s. A <code>DIAG_TQ</code> is constructed from
			<code>diag_tq_null</code> and the various <code>add_diag_XXX</code>
			operations.</para>

		<section id="add_diag_const">
			<title>add_diag_const</title>

			<informaltable>
				<!-- TODO: <phrase>add_diag_const encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"><varname>qual</varname>: DIAG_TQ
 -&gt; DIAG_TQ</programlisting>

			<para>Marks a <code>DIAG_TQ</code> type qualifier as being
				<code>const</code> in the ANSI C sense.</para>
		</section>

		<section id="add_diag_volatile">
			<title>add_diag_volatile</title>

			<informaltable>
				<!-- TODO: <phrase>add_diag_volatile encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>2</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"><varname>qual</varname>: DIAG_TQ
 -&gt; DIAG_TQ</programlisting>

			<para>Marks a <code>DIAG_TQ</code> type qualifier as being
				<code>volatile</code> in the ANSI C sense.</para>
		</section>

		<section id="diag_tq_null">
			<title>diag_tq_null</title>

			<informaltable>
				<!-- TODO: <phrase>diag_tq_null encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>3</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"> -&gt; DIAG_TQ</programlisting>

			<para>Create a null <code>DIAG_TQ</code> type qualifier.</para>
		</section>
	</section>

	<section id="filename">
		<title>FILENAME</title>

		<informaltable>
			<!-- TODO: <phrase>FILENAME encoding</phrase> -->
			<tr>
				<td>Sortname:</td>
				<td><function>foreign_sort("~diag_file")</function></td>
			</tr>

			<tr>
				<td>Number of encoding bits:</td>
				<td>2</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>
		</informaltable>

		<para><code>FILENAME</code> record details of source files used in
			producing a <code>CAPSULE</code>. They can be tokenised for
			abbreviation.</para>

		<section id="filename_apply_token">
			<title>filename_apply_token</title>

			<informaltable>
				<!-- TODO: <phrase>filename_apply_token encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"><varname>token_value</varname>: TOKEN
<varname>token_args</varname>:  BITSTREAM
 -&gt; FILENAME</programlisting>

			<para>The token is applied to the arguments to give a
				<code>FILENAME</code>.  If there is a definition for
				<varname>token_value</varname> in the <code>CAPSULE</code> then
				<varname>token_args</varname> is a <code>BITSTREAM</code> encoding of
				the <code>SORT</code>s of its parameters, in the order
				specified.</para>
		</section>

		<section id="make_filename">
			<title>make_filename</title>

			<informaltable>
				<!-- TODO: <phrase>make_filename</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>2</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"><varname>date</varname>:    NAT
<varname>machine</varname>: TDFSTRING(k1, n1)
<varname>file</varname>:    TDFSTRING(k2, n2)
 -&gt; FILENAME</programlisting>

			<para>Create a <code>FILENAME</code> for file <varname>file</varname>,
				dated <varname>date</varname> (a UNIX timestamp; seconds since 1 Jan
				1970) on machine <varname>machine</varname>.</para>
		</section>
	</section>

	<section id="sourcemark">
		<title>SOURCEMARK</title>

		<informaltable>
			<!-- TODO: <phrase>SOURCEMARK encoding</phrase> -->
			<tr>
				<td>Number of encoding bits:</td>
				<td>1</td>
			</tr>

			<tr>
				<td>Is coding extendable:</td>
				<td>yes</td>
			</tr>
		</informaltable>

		<para>A <code>SOURCEMARK</code> records a location in the source
			program. Present <code>SOURCEMARK</code>s assume that a location can
			be described by one or two numbers within a
			<code>FILENAME</code>.</para>

		<section id="make_sourcemark">
			<title>make_sourcemark</title>

			<informaltable>
				<!-- TODO: <phrase>make_sourcemark encoding</phrase> -->
				<tr>
					<td>Encoding number:</td>
					<td>1</td>
				</tr>
			</informaltable>

			<programlisting language="tdf"><varname>file</varname>:        FILENAME
<varname>line_no</varname>:     NAT
<varname>char_offset</varname>: NAT
 -&gt; SOURCEMARK</programlisting>
  
			<para>Create a <code>SOURCEMARK</code> referencing the
				<varname>char_offset</varname>'th character on line
				<varname>line_no</varname> in file <varname> file</varname>.</para>

			<para><varname>char_offset</varname> is counted from 1, 0 meaning that
				no character offset is available.</para>
		</section>
	</section>
</chapter>
  
